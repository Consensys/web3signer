get:
  operationId: KEYMANAGER_LIST
  summary: List Keys.
  description: |
    List all validating pubkeys known to and decrypted by this keymanager binary
  security:
    - bearerAuth: []
  tags:
    - Keymanager
  responses:
    "200":
      description: Success response
      content:
        application/json:
          schema:
            title: ListKeysResponse
            type: object
            required: [data]
            properties:
              data:
                type: array
                items:
                  type: object
                  required: [validating_pubkey]
                  properties:
                    validating_pubkey:
                      $ref: "../schemas.yaml#/components/schemas/Pubkey"
                    derivation_path:
                      type: string
                      description: The derivation path (if present in the imported keystore).
                      example: "m/12381/3600/0/0/0"
                    readonly:
                      type: boolean
                      description: The key associated with this pubkey cannot be deleted from the API
    "401":
      $ref: "../schemas.yaml#/components/responses/Unauthorized"
    "403":
      $ref: "../schemas.yaml#/components/responses/Forbidden"
    "500":
      $ref: "../schemas.yaml#/components/responses/InternalError"

post:
  operationId: KEYMANAGER_IMPORT
  summary: Import Keystores.
  description: |
    Import keystores generated by the Eth2.0 deposit CLI tooling. `passwords[i]` must unlock `keystores[i]`.

    Users SHOULD send slashing_protection data associated with the imported pubkeys. MUST follow the format defined in
    EIP-3076: Slashing Protection Interchange Format.
  security:
    - bearerAuth: []
  tags:
    - Keymanager
  requestBody:
    content:
      application/json:
        schema:
          type: object
          required: [keystores, passwords]
          properties:
            keystores:
              type: array
              description: JSON-encoded keystore files generated with the Launchpad.
              items:
                $ref: "../schemas.yaml#/components/schemas/Keystore"
            passwords:
              type: array
              description: Passwords to unlock imported keystore files. `passwords[i]` must unlock `keystores[i]`.
              items:
                type: string
                example: "ABCDEFGH01234567ABCDEFGH01234567"
            slashing_protection:
              $ref: "../schemas.yaml#/components/schemas/SlashingProtectionData"
  responses:
    "200":
      description: Success response
      content:
        application/json:
          schema:
            title: ImportKeystoresResponse
            type: object
            required: [data]
            properties:
              data:
                type: array
                description: Status result of each `request.keystores` with same length and order of `request.keystores`
                items:
                  type: object
                  required: [status]
                  properties:
                    status:
                      type: string
                      description: |
                        - imported: Keystore successfully decrypted and imported to keymanager permanent storage
                        - duplicate: Keystore's pubkey is already known to the keymanager
                        - error: Any other status different to the above: decrypting error, I/O errors, etc.
                      enum:
                        - imported
                        - duplicate
                        - error
                      example: imported
                    message:
                      type: string
                      description: error message if status == error
    "400":
      $ref: "../schemas.yaml#/components/responses/BadRequest"
    "401":
      $ref: "../schemas.yaml#/components/responses/Unauthorized"
    "403":
      $ref: "../schemas.yaml#/components/responses/Forbidden"
    "500":
      $ref: "../schemas.yaml#/components/responses/InternalError"

delete:
  operationId: KEYMANAGER_DELETE
  summary: Delete Keys.
  description: |
    DELETE must delete all keys from `request.pubkeys` that are known to the keymanager and exist in its
    persistent storage. Additionally, DELETE must fetch the slashing protection data for the requested keys from
    persistent storage, which must be retained (and not deleted) after the response has been sent. Therefore in the
    case of two identical delete requests being made, both will have access to slashing protection data.

    In a single atomic sequential operation the keymanager must:
    1. Guarantee that key(s) can not produce any more signature; only then
    2. Delete key(s) and serialize its associated slashing protection data

    DELETE should never return a 404 response, even if all pubkeys from request.pubkeys have no extant keystores
    nor slashing protection data.
  security:
    - bearerAuth: []
  tags:
    - Keymanager
  requestBody:
    content:
      application/json:
        schema:
          type: object
          required: [pubkeys]
          properties:
            pubkeys:
              type: array
              description: List of public keys to delete.
              items:
                $ref: "../schemas.yaml#/components/schemas/Pubkey"
  responses:
    "200":
      description: Success response
      content:
        application/json:
          schema:
            title: DeleteKeysResponse
            type: object
            required: [data, slashing_protection]
            properties:
              data:
                type: array
                description: Deletion status of all keys in `request.pubkeys` in the same order.
                items:
                  type: object
                  required: [status]
                  properties:
                    status:
                      type: string
                      description: |
                        - deleted: key was active and removed
                        - not_active: slashing protection data returned but key was not active
                        - not_found: key was not found to be removed, and no slashing data can be returned
                        - error: unexpected condition meant the key could not be removed (the key was actually found, but we couldn't stop using it) - this would be a sign that making it active elsewhere would almost certainly cause you headaches / slashing conditions etc.
                      enum:
                        - deleted
                        - not_active
                        - not_found
                        - error
                      example: deleted
                    message:
                      type: string
                      description: error message if status == error
              slashing_protection:
                $ref: "../schemas.yaml#/components/schemas/SlashingProtectionData"
    "400":
      $ref: "../schemas.yaml#/components/responses/BadRequest"
    "401":
      $ref: "../schemas.yaml#/components/responses/Unauthorized"
    "403":
      $ref: "../schemas.yaml#/components/responses/Forbidden"
    "500":
      $ref: "../schemas.yaml#/components/responses/InternalError"
