---
version: 2.1

orbs:
  slack: circleci/slack@3.4.1

executors:
  executor_med:  # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO      
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m

  executor_large: # 4cpu, 8G ram
    docker:
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO    
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Xmx4096m

  executor_large_with_fc_devnet: # 4cpu, 8G ram
    docker:
      # Primary container
      - image: circleci/openjdk:11.0.8-jdk-buster
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO      
      # Secondary container running lotus as devnet on port 7777
      - image: textile/lotus-devnet
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO        
        environment:
          TEXLOTUSDEVNET_BIGSECTORS: false
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Xmx4096m
      LOTUS_PORT: 7777

  executor_node:
    docker:
      - image: cimg/node:17.1.0

  machine_executor:
    machine:
      image: ubuntu-2004:202008-01 #Ubuntu 20.04, docker 19.03, docker-compose 1.27.4
      docker_layer_caching: true
    working_directory: ~/project

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}
            - deps-

  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            rm -rf build/test-output
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-output/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_test_results:
          path: build/test-output

  capture_test_reports:
    description: "Capture test reports"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            rm -rf build/test-reports
            FILES=`find . -name reports`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/reports@\1@'`
              TARGET="build/test-reports/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_artifacts:
          path: build/test-reports
          destination: test-reports

  install_docker_buildx:
    description: "Install Docker buildx plugin"
    steps:
      - run:
          name: "Install Docker buildx plugin"
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx

  notify:
    description: "Notify Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: 'master'
          
jobs:
  build:
    executor: executor_large
    steps:
      - prepare
      - run:
          name: Build
          command: |
            git submodule update --init --recursive
            ./gradlew --no-daemon --parallel build
      - run:
          name: Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel test
      - run:
          name: Integration Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel integrationTest --info
      - notify
      - capture_test_results
      - capture_test_reports
      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./

  acceptanceTests:
    executor: executor_large_with_fc_devnet
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      # Wait for FC-DevNet to be up
      - run: sleep 5 && nc -vz localhost 7777
      - run:
          name: Acceptance Tests
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon clean installDist
            ./gradlew --no-daemon --parallel acceptanceTest
      - notify
      - capture_test_results
      - capture_test_reports

  performanceTests:
    executor: executor_large
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: Performance Tests
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon clean installDist
            ./gradlew --no-daemon gatlingRun
      - notify
      - capture_test_reports

  publish:
    executor: executor_med
    steps:
      - prepare
      - run:
          name: Install Python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python3-venv
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel cloudSmithUpload
      - notify

  buildDocker:
    executor: machine_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: build and test Docker image
          command: |
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" testDocker
      - notify

  publishDocker:
    executor: machine_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - install_docker_buildx
      - run:
          name: Configure Buildx for Multi-Arch
          command: |
            docker run --rm --privileged tonistiigi/binfmt:latest --install "linux/amd64,linux/arm64"
            docker buildx create --use --driver docker-container
      - run:
          name: Publish Docker
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" dockerUpload
      - notify

  publishOpenApiSpec:
    executor: executor_node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8c:7f:3d:66:05:d9:12:a2:af:58:59:bf:97:c1:c7:84"
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - node-cache-{{ checksum "./.openapidoc/package-lock.json" }}
            - node-cache-
      - run:
          name: Build Folder
          working_directory: .openapidoc 
          command: |
            npm ci
            OA_GIT_USERNAME=$CIRCLE_USERNAME OA_GIT_EMAIL="${CIRCLE_USERNAME}@users.noreply.github.com" OA_GIT_URL=$CIRCLE_REPOSITORY_URL OA_GH_PAGES_BRANCH="gh-pages" node publish.js
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "./.openapidoc/package-lock.json" }}

workflows:
  version: 2
  default:
    jobs:
      - build:
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
      - acceptanceTests:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags:
              <<: *filters-release-tags
      - performanceTests:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags:
              <<: *filters-release-tags
      - publishOpenApiSpec:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
          context:
            - dockerhub-quorumengineering-ro
      - publish:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
          context:
            - dockerhub-quorumengineering-ro
            - cloudsmith-protocols
      - buildDocker:
          requires:
            - build
          context:
            - dockerhub-quorumengineering-ro
          filters:
            tags:
              <<: *filters-release-tags
      - publishDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
            - buildDocker
          context:
            - dockerhub-quorumengineering-rw 
