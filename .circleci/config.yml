---
version: 2.1

executors:
  executor_med:  # 2cpu, 4G ram
    docker:
      - image: cimg/openjdk:21.0
        auth: &docker-auth
          # Don't panic, throw away account to avoid Docker rate limits when downloading.
          # Second reason we're doing this is so that forked PRs from external contributors works ie env vars aren't visible to forked PRs from within contexts
          username: "cddockeruser"
          password: "fa8651f2-88be-48b7-98ce-e711bd376252"  
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m

  executor_large: # 4cpu, 8G ram
    docker:
      - image: cimg/openjdk:21.0
        auth:
          <<: *docker-auth   
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Xmx4096m

  executor_large_with_fc_devnet: # 4cpu, 8G ram
    docker:
      # Primary container
      - image: cimg/openjdk:21.0
        auth:
          <<: *docker-auth     
      # Secondary container running lotus as devnet on port 7777
      - image: textile/lotus-devnet
        auth:
          <<: *docker-auth       
        environment:
          TEXLOTUSDEVNET_BIGSECTORS: false
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Xmx4096m
      LOTUS_PORT: 7777

  executor_node:
    docker:
      - image: cimg/node:17.1.0

  machine_executor_arm64:
    machine:
      image: ubuntu-2204:current # https://circleci.com/developer/machine/image/ubuntu-2204
    resource_class: arm.medium
    environment:
      architecture: "arm64"
      platform: "linux/arm64"

  machine_executor_amd64:
    machine:
      image: ubuntu-2204:current # https://circleci.com/developer/machine/image/ubuntu-2204
    working_directory: ~/project
    environment:
      architecture: "amd64"
      platform: "linux/amd64"

  trivy_executor:
    docker:
      - image: cimg/base:current
        auth:
          <<: *docker-auth
    resource_class: small
    working_directory: ~/project

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps21-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps21-{{ checksum "build.gradle" }}
            - deps21-
  machine_java:
    description: "Install Java 21 on machine executors"
    steps:
      - run:
          name: Java 21
          command: |
            sudo apt update
            sudo apt install -q --assume-yes openjdk-21-jre-headless openjdk-21-jdk-headless
            sudo update-java-alternatives -a
  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            rm -rf build/test-output
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-output/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_test_results:
          path: build/test-output

  capture_test_reports:
    description: "Capture test reports"
    steps:
      - run:
          name: Gather test results
          when: always
          command: |
            rm -rf build/test-reports
            FILES=`find . -name reports -not -path './build/reports'`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/reports@\1@'`
              TARGET="build/test-reports/$MODULE"
              SOURCE="${FILE}/tests/test"
              mkdir -p "$TARGET"
              if [[ -d "$SOURCE" ]]; then
                cp -rf "$SOURCE" "$TARGET"
              fi
            done
            if [[ -f 'build/reports/dependency-check-report.html' ]]; then
              cp 'build/reports/dependency-check-report.html' 'build/test-reports'
            fi
      - store_artifacts:
          path: build/test-reports
          destination: test-reports

  docker_trust_sign:
    description: "Sign docker images"
    steps:
      - run:
          name: "Sign Docker images"
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            # dct signing setup
            mkdir -p $HOME/.docker/trust/private
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
            docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name ecosystem

  docker_publish_images:
    description: "Upload the docker images"
    steps:
      - run:
          name: "Publish Docker Images"
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" uploadDocker

jobs:
  build:
    executor: executor_large
    steps:
      - prepare
      - run:
          name: Build
          command: |
            git submodule update --init --recursive
            ./gradlew --no-daemon --parallel build
      - store_artifacts:
          path: build/distributions
          destination: distributions
      - run:
          name: Dependency vulnerability scan
          no_output_timeout: 40m
          command: |
            ./gradlew --no-daemon -Dorg.gradle.parallel=false dependencyCheckAggregate -DnvdApiDelay=6000
      - run:
          name: Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel test
      - run:
          name: Integration Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel integrationTest --info
      - capture_test_results
      - capture_test_reports
      - save_cache:
          name: Caching gradle dependencies
          key: deps21-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./

  acceptanceTests:
    executor: executor_large_with_fc_devnet
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      # Wait for FC-DevNet to be up
      - run: sleep 5 && nc -vz localhost 7777
      - run:
          name: Acceptance Tests
          no_output_timeout: 20m
          command: |
            if [ -n "$GCP_SERVICE_KEY" ]; then
              echo "$GCP_SERVICE_KEY" | base64 --decode > $HOME/gcp_service_key.json
              export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcp_service_key.json
            fi
            ./gradlew --no-daemon clean installDist
            ./gradlew --no-daemon --parallel acceptanceTest
      - capture_test_results
      - capture_test_reports

  publish:
    executor: executor_med
    steps:
      - prepare
      - run:
          name: Install Python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python3-venv
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel cloudSmithUpload

  buildDocker:
    executor: machine_executor_amd64
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - machine_java
      - run:
          name: build and test Docker image
          command: |
            ./gradlew --no-daemon --parallel "-Pbranch=${CIRCLE_BRANCH}" testDocker
      - store_test_results:
            path: docker/reports
  publishDockerAmd64:
    executor: machine_executor_amd64
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - machine_java
      - docker_trust_sign
      - docker_publish_images

  publishDockerArm64:
    executor: machine_executor_arm64
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - machine_java
      - docker_trust_sign
      - docker_publish_images

  manifestDocker:
    executor: executor_med
    steps:
      - prepare
      - docker_trust_sign
      - run:
          name: Create and publish docker manifest
          command: |
            ./gradlew --no-daemon --parallel manifestDocker

  dockerScan:
    executor: trivy_executor
    steps:
      - prepare
      - run:
          name: Install trivy
          command: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin
      # scan both develop-arm64 and develop-amd64 images using remote src.
      - run:
          name: Scan with trivy
          shell: /bin/sh
          command: |
            $HOME/bin/trivy image consensys/web3signer:develop-arm64 --image-src remote --exit-code 1 --quiet --no-progress --severity HIGH,CRITICAL --ignorefile "gradle/trivyignore.txt" --timeout 10m
            $HOME/bin/trivy image consensys/web3signer:develop-amd64 --image-src remote --exit-code 1 --quiet --no-progress --severity HIGH,CRITICAL --ignorefile "gradle/trivyignore.txt" --timeout 10m

  publishOpenApiSpec:
    executor: executor_node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8c:7f:3d:66:05:d9:12:a2:af:58:59:bf:97:c1:c7:84"
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - node-cache-{{ checksum "./.openapidoc/package-lock.json" }}
            - node-cache-
      - run:
          name: Build Folder
          working_directory: .openapidoc 
          command: |
            npm ci
            OA_GIT_USERNAME=$CIRCLE_USERNAME OA_GIT_EMAIL="${CIRCLE_USERNAME}@users.noreply.github.com" OA_GIT_URL=$CIRCLE_REPOSITORY_URL OA_GH_PAGES_BRANCH="gh-pages" node publish.js
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "./.openapidoc/package-lock.json" }}

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 17 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context:
            - protocols-signers
      - dockerScan
      - acceptanceTests:
          requires:
            - build
          context:
            - protocols-signers
            
  default:
    jobs:
      - build:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
          context:
            - protocols-signers
      - acceptanceTests:
          requires:
            - build
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - protocols-signers
      - publishOpenApiSpec:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
      - publish:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
          context:
            - protocols-cloudsmith
      - buildDocker:
          requires:
            - build
          filters:
            tags:
              <<: *filters-release-tags
      - publishDockerAmd64:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
            - buildDocker
          context:
            - protocols-dockerhub
      - publishDockerArm64:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - acceptanceTests
            - buildDocker
          context:
            - protocols-dockerhub
      - manifestDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - publishDockerArm64
            - publishDockerAmd64
          context:
            - protocols-dockerhub
