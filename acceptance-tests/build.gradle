import groovy.text.SimpleTemplateEngine
import java.time.LocalTime

/*
 * Copyright 2019 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

plugins {
  id "de.undercouch.download" version "5.6.0"
  id "com.google.osdetector" version "1.7.3"
}

dependencies {
  testImplementation project(":app")
  testImplementation project(":core")
  testImplementation project(":signing")
  testImplementation project(":commandline")
  testImplementation project(":common")
  testImplementation project(":bls-keystore")
  testImplementation 'io.consensys.tuweni:tuweni-bytes'
  testImplementation 'io.consensys.tuweni:tuweni-units'
  testImplementation 'io.consensys.tuweni:tuweni-net'
  testImplementation 'commons-io:commons-io'
  testImplementation 'io.vertx:vertx-core'
  testImplementation 'io.vertx:vertx-web'
  testImplementation 'io.vertx:vertx-web-client'
  testImplementation 'org.apache.logging.log4j:log4j-api'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.awaitility:awaitility'
  testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
  testImplementation 'tech.pegasys.teku.internal:bls'
  testImplementation 'tech.pegasys.teku.internal:spec'
  testImplementation 'tech.pegasys.teku.internal:networks'
  testImplementation 'tech.pegasys.teku.internal:json'
  testImplementation (group: 'tech.pegasys.teku.internal', name: 'spec', classifier: 'test-fixtures')
  testImplementation (group: 'tech.pegasys.teku.internal', name: 'bls', classifier: 'test-fixtures')
  testImplementation (group: 'tech.pegasys.teku.internal', name: 'metrics', classifier: 'test-fixtures')
  testImplementation 'tech.pegasys.teku.internal:metrics'
  testImplementation 'tech.pegasys.teku.internal:serializer'
  testImplementation 'tech.pegasys.teku.internal:unsigned'
  testImplementation 'tech.pegasys.teku.internal:async'
  testImplementation 'io.rest-assured:rest-assured'
  testImplementation 'org.web3j:core'
  testImplementation 'org.web3j:crypto'
  testImplementation 'org.web3j:besu'
  testImplementation 'com.github.arteam:simple-json-rpc-server'
  testImplementation 'com.github.arteam:simple-json-rpc-client'
  testImplementation 'org.flywaydb:flyway-core'
  testImplementation 'org.flywaydb:flyway-database-postgresql'
  testImplementation 'org.jdbi:jdbi3-core'
  testImplementation 'org.zeroturnaround:zt-exec'
  testImplementation (testFixtures(project(":keystorage")))
  testImplementation (testFixtures(project(":slashing-protection")))
  testImplementation (testFixtures(project(":signing")))
  testImplementation enforcedPlatform('io.zonky.test.postgres:embedded-postgres-binaries-bom')
  testImplementation 'io.zonky.test:embedded-postgres'
  testImplementation 'org.bouncycastle:bcprov-jdk18on'
  testImplementation 'com.azure:azure-identity'
  testImplementation 'com.azure:azure-security-keyvault-keys'
  testImplementation 'com.azure:azure-security-keyvault-secrets'
  testImplementation 'software.amazon.awssdk:auth'
  testImplementation 'software.amazon.awssdk:secretsmanager'
  testImplementation 'software.amazon.awssdk:kms'

  // JUnit test dependencies
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testRuntimeOnly 'javax.activation:activation'
  testRuntimeOnly 'org.apache.logging.log4j:log4j-core'
  testRuntimeOnly 'tech.pegasys:jblst'
}

test.enabled = false

tasks.register('cleanBesuInstall', Delete) {
  delete layout.buildDirectory.dir("besu")
}

tasks.register('downloadBesu', Download) {
  src {
    // see gradle.properties for Besu URL
    return new SimpleTemplateEngine().createTemplate(besuDistroUrl).make(["besuVersion":"$besuVersion"]).toString()
  }
  dest layout.buildDirectory.file("downloads/besu-${besuVersion}.tar.gz")
  onlyIfModified true
  retries 3
}

tasks.register('extractBesu', Copy) {
  dependsOn tasks.named('cleanBesuInstall'), tasks.named('downloadBesu')

  from(tarTree(tasks.named('downloadBesu').get().dest)) {
    include "besu-${besuVersion}/**"
    eachFile { fcd ->
      fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    }
    includeEmptyDirs = false
  }
  into layout.buildDirectory.dir("besu")
}

def vaultBinary () {
  switch (osdetector.os) {
    case "windows":
      return layout.buildDirectory.file("vault-bin/vault.exe").get().asFile.absolutePath
    default:
      return layout.buildDirectory.file("vault-bin/vault").get().asFile.absolutePath
  }
}

def getOsXArchForVault() {
  switch(osdetector.arch) {
    case "aarch_64":
      return "arm64"
    default:
      return "amd64"
  }
}

def vaultDownloadUrl() {
  // see gradle.properties for Hashicorp Vault URL
  switch (osdetector.os) {
    case "windows":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_windows_amd64.zip"
    case "linux":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_linux_amd64.zip"
    case "osx":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_darwin_${getOsXArchForVault()}.zip"
    default:
      throw new GradleException("Unsupported OS: ${osdetector.os}")
  }
}

tasks.register('downloadVault', Download) {
  src {
    return vaultDownloadUrl()
  }
  dest layout.buildDirectory.file("downloads/hashicorp.zip")
  onlyIfModified true
}

tasks.register('extractVault', Copy) {
  dependsOn tasks.named('downloadVault')

  from zipTree(tasks.named('downloadVault').get().dest)
  into layout.buildDirectory.dir("vault-bin")
}

tasks.register('acceptanceTest', Test) {
  dependsOn rootProject.installDist, tasks.named('extractBesu'), tasks.named('extractVault')

  inputs.property "integration.date", LocalTime.now() // so it runs at every invocation
  mustRunAfter rootProject.subprojects*.test
  description = 'Runs Web3Signer acceptance tests.'
  group = 'verification'
  //systemProperty 'debugSubProcess', 'true'
  systemProperty 'acctests.runWeb3SignerAsProcess', 'true'
  systemProperty 'besuInstallDir', layout.buildDirectory.dir("besu").get().asFile.absolutePath
  systemProperty 'vaultBinary', vaultBinary()
  // embedded pg initdb needs following
  environment "LC_CTYPE", "en_US.UTF-8"
  environment "LC_ALL", "en_US.UTF-8"
  useJUnitPlatform()
  // toggle to show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = false
}
